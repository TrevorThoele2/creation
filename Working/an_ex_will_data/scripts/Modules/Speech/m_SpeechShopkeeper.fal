
load m_Utility;

load m_SpeechGraph;
load m_SpeechInput;
load m_SpeechBranch;
load m_SpeechRandomSwitch;

// Prototypes should be a list of outputs or a single output
// This will always return the prototype piece made
function CreateFromPrototypes(part, prototypes)
	// Handle non-list
	def use = nil;
	if IsClass(prototypes, List)
		use = prototypes;
	else
		// "Unpack" the list
		if prototypes.len() == 1
			use = prototypes.first;
		elif prototypes.len() > 1
			use = SpeechRandomSwitch(prototypes);
		end
	end
		
	// Handle nil type
	if not IsNil(part) : part.AddPart(use);
	
	return use;
end

class EnterShop(buying, onNoItems)
	function __call()
		def inventoryComponent = Atmos_Caller.GetEntity().GetComponent(AtmosEntity_ComponentType.Inventory);
		if not self._buying and (IsNil(inventoryComponent) or inventoryComponent.GetTotalItemCount() == 0)
			if not IsNil(self._onNoItems) : self._onNoItems();
			return;
		end
		
		AtmosShop_Enter(self._buying);
		
		while AtmosShop_IsActive() : Atmos_Suspend();
	end
	
	function Reset()
		if self._onNoItems provides Reset : self._onNoItems.Reset();
	end
	
	_buying = buying;
	_onNoItems = onNoItems;
end

function CreateShopEnter(input, string, buying, onNoItems, prototypes, outerBranch, loopTo)
	def branch = input.AddPart(Atmos_Pair(string, SpeechBranch()));
	
	def exitBranch = nil;
	if not IsNil(onNoItems)
		exitBranch = SpeechBranch(CreateFromPrototypes(nil, onNoItems));
		exitBranch.AddPart(outerBranch.CreateLoop(loopTo));
	end
	
	branch.AddPart(EnterShop(buying, exitBranch));
	CreateFromPrototypes(branch, prototypes);
	
	branch.AddPart(outerBranch.CreateLoop(loopTo));
end

// Greetings, onNoItems, onLeave, onEnterBuy, onEnterSell, buySuccess, sellSuccess: array of SpeechOutput (or single SpeechOutput)
// Enter, buy, sell, leave: string
function SimpleShopkeeperSpeech(greetings, enter, buy, sell, leave, onNoItems, onLeave, onEnterBuy, onEnterSell, buySuccess, sellSuccess)
	// Create introductory outputs
	def graph = SpeechGraph();
	CreateFromPrototypes(graph, greetings);
	
	// Setup input
	def input = SpeechInput(nil, enter);
	graph.AddPart(input);
	// Buy transaction
	CreateShopEnter($input, buy, true, nil, onEnterBuy, graph, input);
	// Sell transaction
	CreateShopEnter($input, sell, false, onNoItems, onEnterSell, graph, input);
	// Leave
	input.AddPart(Atmos_Pair(leave, CreateFromPrototypes(nil, onLeave)));
	
	// Execute the speech graph
	graph();
end

export SimpleShopkeeperSpeech;