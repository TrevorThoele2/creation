
load m_Utility;

// Output: string
// Reset: if true, will reset the speech handler's string
// Parts: List of Atmos_Pairs(string : part)
class SpeechInput(parts, output, reset)
	function __call()
		AtmosSpeech_SetCharacters(self._output);
	
		def array = [];
		for key, value in self._parts : array += value.first;
		
		// Pass array
		AtmosSpeech_ActivateInput(array);
	
		// Spinwait on the player to select a part
		loop
			// Wait until the next action pressed
			Atmos_Suspend();
		
			if AtmosInput_IsActionPressed(AtmosInput_Action.Use)
				def position = AtmosSpeech_GetInputPosition();
				self._selectedPart = self._parts[position];
				break;
			end
		end
		
		if self._reset == true : AtmosSpeech_ClearCharacters();
		
		AtmosSpeech_DeactivateInput();
		self._selectedPart.second();
	end
	
	function Reset()
		self._selectedPart = nil;
		
		for key, value in self._parts
			if value.second provides Reset : value.second.Reset();
		end
	end
	
	// Part to add is pair of (string, speech part)
	// Returns copy of the added part
	function AddPart(part)
		if not IsClass(part, Atmos_Pair)
			def typeName = part.toString();
			if IsString(part) : typeName = "String";
			
			Atmos_Log("A part was attempted to add to a SpeechInput that was not an Atmos_Pair. Part type: " + typeName);
			return;
		end
	
		self._parts += [self.Size() + 1 => part];
		return self._parts.back().second;
	end
	
	function Size()
		return self._parts.len();
	end
	
	// Only works with strings
	function SetOutput(set)
		if IsString(set) : self._output = set;
	end
	
	_output = "";
	_reset = true;
	// Parts will always be a dictionary. Is 0-based
	_parts = [ => ];
	_selectedPart = nil;
	
	init
		// Set output
		self.SetOutput(output);
		
		// Set reset
		if IsBoolean(reset) : self._reset = reset;
	
		// Set parts
		if IsNil(parts)
			// Do nothing
		elif not IsClass(parts, List)
			self.AddPart(parts);
		else
			// Parts is list
			for i in parts : self.AddPart(i);
		end
	end
	
	function _IsSelectedPartValid()
		return IsNil(self._selectedPart);
	end
end

export SpeechInput;