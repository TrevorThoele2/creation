
load m_Utility;

// Parts: dictionary of IDs -> functions
// Can also be a list
	// If this is a list, it'll assign 0 to size - 1 as the IDs
class SpeechRandomSwitch(parts)
	function __call()
		// Determine the type of IDs stored, then get a random ID
		def id = nil;
		def firstKey = self._parts.front(false, true);
		if IsBoolean(firstKey)
			id = Atmos_RandomBool();
		else
			id = Atmos_RandomInteger(firstKey, len(self._parts));
		end
		
		self._parts[id]();
	end
	
	function Reset()
		for key, value in self._parts
			if value provides Reset : value.Reset();
		end
	end
	
	// Returns copy of the added part
	function AddPart(id, part)
		self._parts += [id => part];
		return self._parts.back();
	end
	
	function Size()
		return self._parts.len();
	end
	
	_parts = [ => ];

	init
		if IsDictionary(parts): self._parts = parts;
		
		// Assign the list with IDs from 0 to size - 1
		if IsClass(parts, List)
			def itr = parts.front();
			def count = 0;
			while itr.hasNext()
				self._parts[count] = itr.value();
				++count;
			end
		end
	end
end

export SpeechRandomSwitch;